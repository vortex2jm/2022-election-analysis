@startuml electionAnalysis

class Candidate{
    nrCandidato: int : [1...1]
    nmUrnaCandidato: String
    nmTipoDestinoVotos: String
    dtNascimento: LocalDate
    cdSitTotTurno: boolean
    cdGenero: int
    party: PoliticalParty : [1...1]
    qtVotos: int
    electedPosition: int
    geralPosition: int

    compareTo(Candidate o)
}

class Election{
    candidates: HashMap<Integer, Candidates>
    parties: HashMap<Integer, PoliticalParty>
    legendsCandidatesParties: HashMap<Integer,PoliticalParty>
    nominalVotes: int
    legendVotes: int
    type: int
    currentDate: LocalDate

    addCandidate()
    addPartie(int number, String sg, int federation)
    addLegendsCandidatesParties(int key, PoliticalParty value)
    electedAmount()
    electedCandidates()
    getAllCandidates()
    getBestCandidates()
    electedIfMajorElection()
    electedByProportional()
    getParties()
    getPartiesOrderedByCandidates()
    electedAmountByAge(int start, int end)
    electedMen()
    electedWomen()
}

class PoliticalParty{
    sg: String
    legendVotes: int
    federation: int
    number: int : [1...1]
    candidatesList: List<Candidate>
    position: int

    getCandidatesList()
    getNominalVotes()
    getElectedAmount()
    mostVotedCandidate()
    leastVotedCandidate()
    compareTo(PoliticalParty arg0)
}

class InputServices{
    createReadingBuffer(String args)
    processCandidatesFile(BufferedReader bufferCandidates, Election election)
    processVotesFile(BufferedReader bufferVotes, Election election)
    candidateIsValid(String cdCargo, String cdDetalhesSituacaoCand, int type)
    voteIsValid(String cdCargo, int type, String nrVotavel)
    updateParties(Election election, String[] data)
    inputFormatter(String line)
    updateCandidates(Election election, String[] data, PoliticalParty party)
    updateInvalidCandidates(Election election, String[] data, PoliticalParty party)
    isElectedCandidate(String sit)
    processValidCandidatesVotes(Election election, String[] data)
    processInvalidCandidatesVotes(Election election, String[] data)
}

class OutputServices{
    generateReports(Election election)
    vacanciesNumber(Election election, NumberFormat nf)
    electedCandidates(Election election, NumberFormat nf)
    mostVotedCandidates(Election election, NumberFormat nf)
    harmedCandidates(Election election, NumberFormat nf)
    benefitedCandidates(Election election, NumberFormat nf)
    partyVotingAndElectedCandidates(Election election, NumberFormat nf)
    firstAndLastCandidatesFromParties(Election election, NumberFormat nf)
    electedByAge(Election election, NumberFormat nf, NumberFormat nfDec)
    electedByGender(Election election, NumberFormat nf, NumberFormat nfDec)
    allVoting(Election election, NumberFormat nf, NumberFormat nfDec)
    pluralSingularFilter(int value, String out)
}

class PartyComparatorByCandidate{
    compare(PoliticalParty arg0, PoliticalParty arg1)
}

class App

Candidate --|> PoliticalParty
PoliticalParty -|> Election
PartyComparatorByCandidate --|> Election

Election --|> InputServices
Election --|> OutputServices

InputServices --|> App
OutputServices --|> App

@enduml